$server = "<your-server>.database.windows.net"
$database = "<your-database>"
$user = "<your-username>"
$password = "<your-password>"

$connectionString = "Server=tcp:$server,1433;Initial Catalog=$database;Persist Security Info=False;User ID=$user;Password=$password;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

try {
    Write-Host "Attempting to wake SQL database..."
    $conn = New-Object System.Data.SqlClient.SqlConnection
    $conn.ConnectionString = $connectionString
    $conn.Open()
    Write-Host "✅ SQL Server is awake."
    $conn.Close()
}
catch {
    Write-Warning "First attempt failed. Retrying in 30 seconds..."
    Start-Sleep -Seconds 30
    try {
        $conn.Open()
        Write-Host "✅ SQL Server woke up after retry."
        $conn.Close()
    }
    catch {
        Write-Error "❌ Could not wake up SQL Server."
    }
}




trigger: none  # Don't run on code push

schedules:
  - cron: "0 6 * * *"  # Every day at 6:00 AM UTC
    displayName: Wake SQL Daily
    branches:
      include:
        - main
    always: true

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'filePath'
    filePath: 'WakeSql.ps1'



param(
    [string]$SqlServer,
    [string]$Database
)

try {
    $connectionString = "Server=tcp:$SqlServer,1433;Initial Catalog=$Database;Integrated Security=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
    $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
    $connection.Open()
    Write-Host "Successfully connected to SQL Server: $SqlServer, Database: $Database"
} catch {
    Write-Error "Error connecting to SQL Server: $SqlServer, Database: $Database"
    Write-Error $_.Exception.Message
} finally {
    if ($connection -ne $null -and $connection.State -eq "Open") {
        $connection.Close()
    }
}





trigger: none

schedules:
- cron: "0 6 * * *"
  displayName: Daily wake-up job
  branches:
    include:
    - main

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  inputs:
    filePath: '$(Build.SourcesDirectory)/wake-up-script.ps1'
    arguments: '-SqlServer "$(SqlServer)" -Database "$(Database)"'






stages:
- stage: WakeUpDatabase
  displayName: 'Wake Up Database'
  jobs:
  - deployment: WakeUpDatabase
    displayName: 'Wake Up Database'
    pool:
      vmImage: 'windows-latest'
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'Execute Wake-Up Script'
            inputs:
              filePath: '$(powershellScriptsPath)/wake-up-script.ps1'
              arguments: '-SqlServer "$(sqlServer)" -Database "$(sqlDatabase)"'
trigger: none

schedules:
  - cron: "0 6 * * *"
    
displayName: Daily wake-up job

branches:
  include:
    - "Infrastructure\NDRDataMigration\"
    - "pipelines\NDR_Datamigration\"
always: true

pool: 'CISPWA - Dev'

parameters:
  - name: environment
    type: string
    default: "dev"
    
variables:
  resourceGroupName: $()
  sqlServerName: ''
  databaseName: ''
  sqlUsername: ''
  keyVaultName: 's'
  
stages:
  - stage: WakeUpDatabase
    displayName: "Wake Up Database"
    jobs:
      - job: WakeUpDatabase
        displayName: "Wake Up Database"
        pool:
          vmImage: "windows-latest"
        steps:
          # Step to fetch SQL password from Key Vault
          - task: AzureCLI@2
            displayName: 'Retrieve Secret from KeyVault'
            inputs:
              azureSubscription: 'BST Dev Connection-Cloud Platform'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "Fetching SQL secrets ... "
                $secret1 = az keyvault secret show --name '' --vault-name '$(keyVaultName)' --query value -o tsv
                if (!$secret1){
                  Write-Host "SQL secret fetch failed or returned null ... "
                } else {
                  Write-Host "SQL secret fetched, setting variable on pipeline"
                  Write-Host "##vso[task.setvariable variable=SQL-Admin-Pass-Var;isSecret=true]$secret1"
                }
          
          # Execute the PowerShell script with secrets from Key Vault
          - task: PowerShell@2
            displayName: "Execute Wake-Up Script"
            inputs:
              filePath: "$(System.DefaultWorkingDirectory)/"
              arguments: >
                -SqlServer "$(sqlServerName)" 
                -Database "$(databaseName)" 
                -User "$(sqlUsername)" 
                -Password "$(SQL-Admin-Pass-Var)"
              failOnStderr: false


param(
    [Parameter(Mandatory=$true)]
    [string]$SqlServer,
    
    [Parameter(Mandatory=$true)]
    [string]$Database,
    
    [Parameter(Mandatory=$true)]
    [string]$User,
    
    [Parameter(Mandatory=$true)]
    [string]$Password
)

try {
    $ConnectionString = "Server=tcp:$SqlServer,1433;Initial Catalog=$Database;User ID=$User;Password=$Password;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
    $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
    $Connection.Open()
    Write-Host "Successfully connected to SQL Server: $SqlServer, Database: $Database"
    
    # Add your database operations here
    
} catch {
    Write-Error "Error connecting to SQL Server: $SqlServer, Database: $Database"
    Write-Error $_.Exception.Message
} finally {
    if ($Connection -ne $null -and $Connection.State -eq "Open") {
        $Connection.Close()
    }
}











[Parameter(Mandatory=$true)]
[string]$SqlServer,

[Parameter(Mandatory=$true)]
[string]$Database,

[Parameter(Mandatory=$true)]
[string]$User,

[Parameter(Mandatory=$true)]
[string]$Password

# Define max retry attempts and delay between attempts
$maxRetries = 10
$retryDelay = 30  # seconds
$attempt = 1
$connected = $false

# First check if the SQL Server service is running
try {
    # Determine service name (default instance vs named instance)
    $instanceParts = $SqlServer.Split("\")
    $serverName = $instanceParts[0]
    $instanceName = if ($instanceParts.Length -gt 1) { $instanceParts[1] } else { $null }
    
    $serviceName = if ([string]::IsNullOrEmpty($instanceName)) { "MSSQLSERVER" } else { "MSSQL`$$instanceName" }
    
    # Check service status - may require admin rights
    $service = Get-Service -Name $serviceName -ComputerName $serverName -ErrorAction SilentlyContinue
    
    # If service exists but is not running, try to start it
    if ($service -and $service.Status -ne 'Running') {
        Write-Host "SQL Server service is not running. Attempting to start..."
        Start-Service -Name $serviceName -ComputerName $serverName
        Start-Sleep -Seconds 10  # Give it time to start
    }
    
    # Now try to connect with retry logic
    $ConnectionString = "Server=$SqlServer;Initial Catalog=$Database;User ID=$User;Password=$Password;Encrypt=True;TrustServerCertificate=true;Connection Timeout=30;"
    
    while (-not $connected -and $attempt -le $maxRetries) {
        Write-Host "Connection attempt $attempt of $maxRetries..."
        
        try {
            $Connection = New-Object System.Data.SqlClient.SqlConnection($ConnectionString)
            $Connection.Open()
            
            # Check if connection is actually responsive by running a simple query
            $query = "SELECT 1 AS IsAwake"
            $command = $Connection.CreateCommand()
            $command.CommandText = $query
            $command.CommandTimeout = 15  # Short timeout for the test query
            $result = $command.ExecuteScalar()
            
            Write-Host "Successfully connected to SQL Server: $SqlServer, Database: $Database"
            $connected = $true
            
            # Add your database operations here
            # For example, you might want to run additional "wake up" operations
            Write-Host "Database is now awake and responsive"
            
            # Close this connection before finishing
            $Connection.Close()
        }
        catch {
            Write-Host "Attempt $attempt failed: $_"
            
            # Clean up any partial connection
            if ($Connection -ne $null -and $Connection.State -eq 'Open') {
                $Connection.Close()
            }
            
            # If we haven't reached max retries, wait before trying again
            if ($attempt -lt $maxRetries) {
                Write-Host "Waiting $retryDelay seconds before next attempt..."
                Start-Sleep -Seconds $retryDelay
            }
            else {
                Write-Error "Failed to connect after $maxRetries attempts. Last error: $_"
            }
        }
        
        $attempt++
    }
}
catch {
    Write-Error "Error in SQL Server wake-up process: $_"
}









{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "Data Factory Name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of the data factory."
      }
    },
    "integrationRuntimeName": {
      "type": "string",
      "metadata": {
        "description": "Name of the self-hosted Integration Runtime."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual network."
      }
    },
    "subnet": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet for private endpoint."
      }
    },
    "customNetworkInterfaceName": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Public Network access for ADF."
      }
    },
    "privateEndpointName": {
      "type": "string",
      "metadata": {
        "description": "Name of private endpoint for ADF."
      }
    },
    "privateLinkResource": {
      "type": "string",
      "metadata": {
        "description": "Resource for DataFactory private endpoint."
      }
    },
    "targetSubResource": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subresource for DataFactory private endpoint."
      }
    },
    "enableMSI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable MSI for the Data Factory."
      }
    },
    "userAssignedIdentitiesStr": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "User-assigned identities for the Data Factory."
      }
    },
    "systemAssignedIdentity": {
      "type": "string",
      "defaultValue": { },
      "metadata": {
        "description": "System-assigned identity for the Data Factory."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": { },
      "metadata": {
        "description": "Tags for the resources."
      }
    },
    "devOpsProjectName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure DevOps project to link."
      }
    },
    "devOpsAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure DevOps organization/account."
      }
    },
    "devOpsRepositoryName": {
      "type": "string",
      "metadata": {
        "description": "Name of the repository in Azure DevOps."
      }
    },
    "devOpsBranchName": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Name of the branch in the repository (e.g., main, master, or any other branch)."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[parameters('dataFactoryName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "[if(parameters('enableMSI'), if(empty(parameters('userAssignedIdentitiesStr')), 'SystemAssigned', 'SystemAssigned,UserAssigned'), 'None')]",
        "userAssignedIdentities": "[if(parameters('enableMSI'), json(concat('{\"', parameters('userAssignedIdentities'), '\"}')), json('{}'))]"
      },
      "properties": {
        "publicNetworkAccess": "[toLower(if(parameters('enableMSI'), 'Enabled', 'Disabled'))]",
        "encryption": "[if(parameters('enableMSI'), json(concat('{\"identity\":{\"userAssignedIdentity\":\"', parameters('userAssignedIdentities'), '\"}}'))]"
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('dataFactoryName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.DataFactory/factories/repositories",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('dataFactoryName'), '/repo')]",
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
      ],
      "properties": {
        "type": "AzureDevOpsGit",
        "accountName": "[parameters('devOpsAccountName')]",
        "projectName": "[parameters('devOpsProjectName')]",
        "repositoryName": "[parameters('devOpsRepositoryName')]",
        "collaborationBranch": "[parameters('devOpsBranchName')]"
      }
    },
    {
      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('dataFactoryName'), '/', parameters('integrationRuntimeName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories/repositories', parameters('dataFactoryName'), 'repo')]"
      ],
      "properties": {
        "type": "SelfHosted",
        "description": "Self-Hosted Integration Runtime for on-premises data access"
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-05-01",
      "name": "[parameters('privateEndpointName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
      ],
      "tags": {},
      "properties": {
        "subnet": {
          "id": "[parameters('subnet')]"
        },
        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
        "privateLinkServiceConnections": [
          {
            "name": "[parameters('privateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[parameters('privateLinkResource')]",
              "groupIds": "[parameters('targetSubResource')]"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "dataFactoryName": {
      "type": "string",
      "value": "[parameters('dataFactoryName')]"
    },
    "dataFactoryPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]"
    },
    "integrationRuntimeAuthKey1": {
      "type": "string",
      "value": "[listAuthKeys(resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('dataFactoryName'), parameters('integrationRuntimeName')), '2018-06-01').authKey1]"
    },
    "integrationRuntimeAuthKey2": {
      "type": "string",
      "value": "[listAuthKeys(resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('dataFactoryName'), parameters('integrationRuntimeName')), '2018-06-01').authKey2]"
    }
  }
}







{
  "type": "Microsoft.Resources/deployments",
  "apiVersion": "2021-04-01",
  "name": "repoDeployment",
  "mode": "Incremental",
  "dependsOn": [
    "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
  ],
  "properties": {
    "expressionEvaluationOptions": {
      "scope": "inner"
    },
    "mode": "Incremental",
    "template": {
      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
      "contentVersion": "1.0.0.0",
      "resources": [
        {
          "type": "Microsoft.DataFactory/factories/repositories",
          "apiVersion": "2018-06-01",
          "name": "[concat(parameters('dataFactoryName'), '/repo')]",
          "properties": {
            "type": "FactoryGitHubConfiguration",
            "hostName": "https://dev.azure.com",
            "accountName": "[parameters('devOpsAccountName')]",
            "projectName": "[parameters('devOpsProjectName')]",
            "repositoryName": "[parameters('devOpsRepositoryName')]",
            "collaborationBranch": "[parameters('devOpsBranchName')]",
            "rootFolder": "/"
          }
        }
      ]
    }
  }
}








 {
      "condition": true,
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "linkedTemplateForAzureDevOps",
      "dependsOn": [
        "[variables('factoryId')]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.DataFactory/factories/repositories",
              "apiVersion": "2018-06-01",
              "name": "[concat(parameters('dataFactoryName'), '/repo')]",
              "properties": {
                "type": "FactoryVSTSConfiguration",
                "accountName": "[parameters('devOpsAccountName')]",
                "projectName": "[parameters('devOpsProjectName')]",
                "repositoryName": "[parameters('devOpsRepositoryName')]",
                "collaborationBranch": "[parameters('devOpsBranchName')]",
                "rootFolder": "/"
              }
            }
          ]
        }
      }
    },




"linkedTemplateForAzureDevOps"






# azure-pipelines.yml
trigger:
  - main  # or whatever branch you want to trigger the pipeline

pool:
  vmImage: 'windows-latest'  # or use 'ubuntu-latest' if using Azure CLI

variables:
  resourceGroupName: 'YourResourceGroupName'
  dataFactoryName: 'YourDataFactoryName'
  location: 'YourAzureRegion'
  integrationRuntimeName: 'YourIRName'
  devOpsAccountName: 'YourDevOpsAccount'
  devOpsProjectName: 'YourDevOpsProject'
  devOpsRepositoryName: 'YourRepoName'
  devOpsBranchName: 'main'  # or your preferred branch
  templateFile: './path/to/your/template.json'
  parameterFile: './path/to/your/parameters.json'

stages:
- stage: DeployDataFactory
  jobs:
  - job: DeployInfrastructure
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Deploy Data Factory ARM Template'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'YourAzureServiceConnection'
        subscriptionId: 'YourSubscriptionId'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: '$(templateFile)'
        csmParametersFile: '$(parameterFile)'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'armOutputs'

    - task: PowerShell@2
      displayName: 'Parse ARM Outputs'
      inputs:
        targetType: 'inline'
        script: |
          $armOutputsString = '$(armOutputs)'
          $armOutputs = $armOutputsString | ConvertFrom-Json
          $dataFactoryName = $armOutputs.dataFactoryName.value
          Write-Host "##vso[task.setvariable variable=deployedDataFactoryName]$dataFactoryName"

    - task: AzurePowerShell@5
      displayName: 'Configure Azure DevOps Integration'
      inputs:
        azureSubscription: 'YourAzureServiceConnection'
        ScriptType: 'InlineScript'
        Inline: |
          # Configure the Azure DevOps repository
          Write-Host "Configuring Azure DevOps repository integration..."
          $repoParams = @{
              FactoryName = "$(deployedDataFactoryName)"
              ResourceGroupName = "$(resourceGroupName)"
              AccountName = "$(devOpsAccountName)"
              ProjectName = "$(devOpsProjectName)"
              RepositoryName = "$(devOpsRepositoryName)"
              CollaborationBranch = "$(devOpsBranchName)"
              RootFolder = "/"
              Type = "FactoryVSTSConfiguration"
          }
          Set-AzDataFactoryV2GitHubConfiguration @repoParams
          
          # Wait a bit for the DevOps integration to complete
          Write-Host "Waiting for DevOps integration to complete..."
          Start-Sleep -Seconds 30
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true

    - task: AzurePowerShell@5
      displayName: 'Create Integration Runtime and Get Keys'
      inputs:
        azureSubscription: 'YourAzureServiceConnection'
        ScriptType: 'InlineScript'
        Inline: |
          # Create the Self-Hosted Integration Runtime
          Write-Host "Creating Self-Hosted Integration Runtime..."
          $irParams = @{
              ResourceGroupName = "$(resourceGroupName)"
              DataFactoryName = "$(deployedDataFactoryName)"
              Name = "$(integrationRuntimeName)"
              Type = "SelfHosted"
              Description = "Self-Hosted Integration Runtime for on-premises data access"
          }
          $ir = Set-AzDataFactoryV2IntegrationRuntime @irParams
          
          # Get the Integration Runtime keys
          Write-Host "Retrieving Integration Runtime keys..."
          $keys = Get-AzDataFactoryV2IntegrationRuntimeKey -ResourceGroupName "$(resourceGroupName)" -DataFactoryName "$(deployedDataFactoryName)" -Name "$(integrationRuntimeName)"
          
          # Output the keys to pipeline variables
          Write-Host "##vso[task.setvariable variable=IRAuthKey1;isOutput=true]$($keys.AuthKey1)"
          Write-Host "##vso[task.setvariable variable=IRAuthKey2;isOutput=true]$($keys.AuthKey2)"
          
          # Also output for logging (be careful with sensitive data in logs)
          Write-Host "Integration Runtime Keys retrieved successfully!"
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
