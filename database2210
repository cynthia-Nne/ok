{
  "type": "Microsoft.Resources/deploymentScripts",
  "apiVersion": "2020-10-01",
  "name": "ConfigureSqlPermissions",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]",
    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'bst')]"
  ],
  "kind": "AzureCLI",
  "properties": {
    "azCliVersion": "2.30.0",
    "timeout": "PT30M",
    "retentionInterval": "P1D",
    "cleanupPreference": "OnSuccess",
    "environmentVariables": [
      {
        "name": "SERVER_NAME",
        "value": "[parameters('sqlServerName')]"
      },
      {
        "name": "DATABASE_NAME",
        "value": "[parameters('databaseName')]"
      },
      {
        "name": "UMI_NAME",
        "value": "bst-iaz-umi-dev-dm"
      },
      {
        "name": "USER1_EMAIL",
        "value": "user1@example.com"
      },
      {
        "name": "USER1_OBJECTID",
        "value": "user1-object-id-here"
      }
    ],
    "scriptContent": "scriptContent": "[concat('#!/bin/bash\n', 'RESOURCE_GROUP=$(az group show --query name -o tsv)\n', 'az sql db execute -g $RESOURCE_GROUP -s $SERVER_NAME -n $DATABASE_NAME -q \"', 'IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = ''$UMI_NAME'') ', 'BEGIN ', '  CREATE USER [$UMI_NAME] FROM EXTERNAL PROVIDER; ', '  ALTER ROLE db_datareader ADD MEMBER [$UMI_NAME]; ', '  ALTER ROLE db_datawriter ADD MEMBER [$UMI_NAME]; ', 'END ', 'IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = ''$USER1_EMAIL'') ', 'BEGIN ', '  CREATE USER [$USER1_EMAIL] FROM EXTERNAL PROVIDER WITH OBJECT_ID = ''$USER1_OBJECTID''; ', '  ALTER ROLE db_datareader ADD MEMBER [$USER1_EMAIL]; ', '  ALTER ROLE db_datawriter ADD MEMBER [$USER1_EMAIL]; ', 'END', '\"\n')]"
      
  }
}





-- First, let's set NOCOUNT to suppress messages
SET NOCOUNT ON;

-- Try creating users directly without the IF-BEGIN-END blocks
DECLARE @sql nvarchar(max);

-- Create first user if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'bst')
    SET @sql = 'CREATE USER [] FROM EXTERNAL PROVIDER;';
EXEC sp_executesql @sql;

-- Add roles for first user if it exists
IF EXISTS (SELECT * FROM sys.database_principals WHERE name = 'bst')
BEGIN
    ALTER ROLE db_datareader ADD MEMBER [bst];
    ALTER ROLE db_datawriter ADD MEMBER [bst];
END

-- Create second user if it doesn't exist
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '')
    SET @sql = 'CREATE USER [] FROM EXTERNAL PROVIDER;';
EXEC sp_executesql @sql;

-- Add roles for second user if it exists
IF EXISTS (SELECT * FROM sys.database_principals WHERE name = '')
BEGIN
    ALTER ROLE db_datareader ADD MEMBER [];
    ALTER ROLE db_datawriter ADD MEMBER [];
END












Subject: RE:  

Hi ,

Thank you again for your guidance.

Following your note, I connected with  to review the issue in more detail. We’ve confirmed that the deployment is failing due to a permission requirement for Microsoft.ContainerInstance/register/action. This permission is needed to provision a container instance required by the deploymentScript resource in the ARM template — without it, the script doesn’t get a chance to execute.

From what we can see, this sits at the infrastructure level, and likely needs to be enabled as part of 

I’d be grateful for your support in either pointing us to the right contact within  who can action this, or advising on the appropriate next steps to request the required access.
