{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Deploy Azure Service Bus Premium with Private Endpoint - No DNS management"
  },
  "parameters": {
    "serviceBusNamespaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Service Bus namespace"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing subnet for private endpoint"
      }
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Disable local authentication (connection strings) - use Azure AD only"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Environment": "Production",
        "Service": "ServiceBus"
      },
      "metadata": {
        "description": "Tags to apply to resources"
      }
    }
  },
  "variables": {
    "privateEndpointName": "[concat(parameters('serviceBusNamespaceName'), '-private-endpoint')]",
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "customNetworkInterfaceName": "[concat(parameters('serviceBusNamespaceName'), '-nic')]"
  },
  "resources": [
    {
      "comments": "Service Bus Premium Namespace with Private Endpoint support",
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2022-01-01-preview",
      "name": "[parameters('serviceBusNamespaceName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Premium",
        "tier": "Premium",
        "capacity": 1
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "zoneRedundant": true,
        "minimumTlsVersion": "1.2",
        "disableLocalAuth": "[parameters('disableLocalAuth')]",
        "publicNetworkAccess": "Disabled",
        "premiumMessagingPartitions": 1
      }
    },
    {
      "comments": "Private Endpoint for Service Bus - DNS managed separately",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-05-01", 
      "name": "[variables('privateEndpointName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]"
      ],
      "properties": {
        "subnet": {
          "id": "[variables('subnetId')]"
        },
        "customNetworkInterfaceName": "[variables('customNetworkInterfaceName')]",
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
              "groupIds": [
                "namespace"
              ]
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "serviceBusNamespace": {
      "type": "string",
      "value": "[parameters('serviceBusNamespaceName')]",
      "metadata": {
        "description": "Name of the created Service Bus namespace"
      }
    },
    "serviceBusResourceId": {
      "type": "string", 
      "value": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
      "metadata": {
        "description": "Resource ID of the Service Bus namespace"
      }
    },
    "privateEndpointName": {
      "type": "string",
      "value": "[variables('privateEndpointName')]",
      "metadata": {
        "description": "Name of the private endpoint"
      }
    },
    "privateEndpointIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName')), '2021-05-01').customDnsConfigs[0].ipAddresses[0]]",
      "metadata": {
        "description": "Private IP address of the Service Bus endpoint"
      }
    },
    "serviceBusFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))).serviceBusEndpoint]",
      "metadata": {
        "description": "Service Bus namespace endpoint URL"
      }
    },
    "systemAssignedIdentity": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName')), '2022-01-01-preview', 'full').identity.principalId]",
      "metadata": {
        "description": "Principal ID of the system-assigned managed identity"
      }
    }
  }
}





parameters.json


{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serviceBusNamespaceName": {
      "value": "sb-mycompany-prod-001"
    },
    "location": {
      "value": "East US"
    },
    "virtualNetworkName": {
      "value": "vnet-hub-prod"
    },
    "subnetName": {
      "value": "subnet-privateendpoints"
    },
    "disableLocalAuth": {
      "value": false
    },
    "tags": {
      "value": {
        "Environment": "Production",
        "Service": "ServiceBus",
        "CostCenter": "IT-Infrastructure",
        "Owner": "Platform-Team",
        "Project": "Enterprise-Messaging",
        "BusinessUnit": "Technology",
        "DataClassification": "Confidential",
        "CreatedBy": "ARM-Template",
        "MaintenanceWindow": "Sunday-2AM-EST"
      }
    }
  }
}











trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - Infrastructure/ServiceBus/*
    - Pipelines/ServiceBus/*

parameters:
- name: deployToDev
  displayName: 'Deploy to DEV Environment'
  type: boolean
  default: true
- name: deployToSIT
  displayName: 'Deploy to SIT Environment' 
  type: boolean
  default: false
- name: deployToUAT
  displayName: 'Deploy to UAT Environment'
  type: boolean
  default: false
- name: deployToProd
  displayName: 'Deploy to PROD Environment'
  type: boolean
  default: false

variables:
- name: release
  value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 0)]
- name: major
  value: 1
- name: minor
  value: 0
- name: patch
  value: 0
- name: system.debug
  value: true
- name: serviceConnection
  value: 'YourServiceConnection'
- name: templateFile
  value: './Infrastructure/ServiceBus/serviceBus.json'

stages:
# ===============================
# VALIDATION STAGE
# ===============================
- stage: Validation
  displayName: 'Validate ARM Templates'
  jobs:
  - job: ValidateTemplates
    displayName: 'Validate ARM Templates'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Validate DEV ARM Template'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Validate ARM template with DEV parameters
          az deployment group validate `
            --resource-group "rg-validation-temp" `
            --template-file "$(templateFile)" `
            --parameters "@./Infrastructure/ServiceBus/dev.parameters.json"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "ARM template validation failed for DEV"
            exit 1
          }
          Write-Host "DEV ARM template validation successful"

    - task: AzureCLI@2
      displayName: 'Validate SIT ARM Template'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Validate ARM template with SIT parameters
          az deployment group validate `
            --resource-group "rg-validation-temp" `
            --template-file "$(templateFile)" `
            --parameters "@./Infrastructure/ServiceBus/sit.parameters.json"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "ARM template validation failed for SIT"
            exit 1
          }
          Write-Host "SIT ARM template validation successful"

    - task: PowerShell@2
      displayName: 'Test Network Connectivity'
      inputs:
        targetType: 'inline'
        script: |
          $attempts = 0
          do {
            try {
              $dnsResult = Resolve-DnsName -Name "servicebus.windows.net" -Type A
              if ($dnsResult) {
                Write-Output "DNS resolution successful"
                break
              }
            }
            catch {
              Write-Warning "DNS resolution failed. Attempt: $($attempts + 1). Retrying in 30 seconds..."
              Start-Sleep -Seconds 30
              $attempts++
            }
          } while ($attempts -lt 10)
          
          if ($attempts -eq 10) {
            Write-Error "Failed to resolve DNS after 10 attempts"
            exit 1
          }

# ===============================
# DEV ENVIRONMENT
# ===============================
- stage: DEV_Environment
  displayName: 'Deploy to DEV Environment'
  dependsOn: Validation
  condition: and(succeeded(), eq('${{ parameters.deployToDev }}', true))
  variables:
  - name: environmentName
    value: 'DEV'
  - name: resourceGroupName
    value: 'rg-servicebus-dev'
  - name: parametersFile
    value: './Infrastructure/ServiceBus/dev.parameters.json'
  jobs:
  - deployment: DeployServiceBus
    displayName: 'Deploy Service Bus to DEV'
    pool:
      vmImage: 'windows-latest'
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Service Bus to DEV'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: 'UK South'
              templateLocation: 'Linked artifact'
              csmFile: $(templateFile)
              csmParametersFile: $(parametersFile)
              deploymentMode: 'Incremental'
              deploymentName: 'ServiceBus-DEV-$(Build.BuildNumber)'

          - task: AzurePowerShell@5
            displayName: 'Verify DEV Deployment'
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: 'InlineScript'
              Inline: |
                # Read Service Bus name from parameters file
                $paramsContent = Get-Content "$(parametersFile)" | ConvertFrom-Json
                $serviceBusName = $paramsContent.parameters.serviceBusNamespaceName.value
                
                Write-Output "Checking Service Bus: $serviceBusName in Resource Group: $(resourceGroupName)"
                
                # Get Service Bus namespace details
                try {
                  $namespace = Get-AzServiceBusNamespace -ResourceGroupName "$(resourceGroupName)" -Name $serviceBusName
                  Write-Output "✅ Service Bus Namespace: $($namespace.Name)"
                  Write-Output "✅ Status: $($namespace.Status)"
                  Write-Output "✅ SKU: $($namespace.Sku.Name)"
                  Write-Output "✅ Location: $($namespace.Location)"
                  
                  if ($namespace.ServiceBusEndpoint) {
                    Write-Output "✅ Endpoint: $($namespace.ServiceBusEndpoint)"
                  }
                  
                  Write-Output "DEV Service Bus deployment verified successfully"
                }
                catch {
                  Write-Error "Failed to verify Service Bus deployment: $_"
                  exit 1
                }
              azurePowerShellVersion: 'LatestVersion'

# ===============================
# SIT ENVIRONMENT  
# ===============================
- stage: SIT_Environment
  displayName: 'Deploy to SIT Environment'
  dependsOn: DEV_Environment
  condition: and(succeeded(), eq('${{ parameters.deployToSIT }}', true))
  variables:
  - name: environmentName
    value: 'SIT'
  - name: resourceGroupName
    value: 'rg-servicebus-sit'
  - name: parametersFile
    value: './Infrastructure/ServiceBus/sit.parameters.json'
  jobs:
  - deployment: DeployServiceBus
    displayName: 'Deploy Service Bus to SIT'
    pool:
      vmImage: 'windows-latest'
    environment: 'SIT'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Service Bus to SIT'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: 'UK South'
              templateLocation: 'Linked artifact'
              csmFile: $(templateFile)
              csmParametersFile: $(parametersFile)
              deploymentMode: 'Incremental'
              deploymentName: 'ServiceBus-SIT-$(Build.BuildNumber)'

          - task: AzurePowerShell@5
            displayName: 'Verify SIT Deployment'
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: 'InlineScript'
              Inline: |
                # Read Service Bus name from parameters file
                $paramsContent = Get-Content "$(parametersFile)" | ConvertFrom-Json
                $serviceBusName = $paramsContent.parameters.serviceBusNamespaceName.value
                
                Write-Output "Checking Service Bus: $serviceBusName in Resource Group: $(resourceGroupName)"
                
                # Get Service Bus namespace details
                try {
                  $namespace = Get-AzServiceBusNamespace -ResourceGroupName "$(resourceGroupName)" -Name $serviceBusName
                  Write-Output "✅ Service Bus Namespace: $($namespace.Name)"
                  Write-Output "✅ Status: $($namespace.Status)"
                  Write-Output "✅ SKU: $($namespace.Sku.Name)"
                  Write-Output "✅ Location: $($namespace.Location)"
                  
                  # Check if Premium SKU has additional features
                  if ($namespace.Sku.Name -eq "Premium") {
                    Write-Output "✅ Premium Features Available"
                    Write-Output "✅ Zone Redundant: $($namespace.ZoneRedundant)"
                  }
                  
                  Write-Output "SIT Service Bus deployment verified successfully"
                }
                catch {
                  Write-Error "Failed to verify Service Bus deployment: $_"
                  exit 1
                }
              azurePowerShellVersion: 'LatestVersion'

# ===============================
# UAT ENVIRONMENT
# ===============================
- stage: UAT_Environment
  displayName: 'Deploy to UAT Environment'
  dependsOn: SIT_Environment
  condition: and(succeeded(), eq('${{ parameters.deployToUAT }}', true))
  variables:
  - name: environmentName
    value: 'UAT'
  - name: resourceGroupName
    value: 'rg-servicebus-uat'
  - name: parametersFile
    value: './Infrastructure/ServiceBus/uat.parameters.json'
  jobs:
  - deployment: DeployServiceBus
    displayName: 'Deploy Service Bus to UAT'
    pool:
      vmImage: 'windows-latest'
    environment: 'UAT'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Service Bus to UAT'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: 'UK South'
              templateLocation: 'Linked artifact'
              csmFile: $(templateFile)
              csmParametersFile: $(parametersFile)
              deploymentMode: 'Incremental'
              deploymentName: 'ServiceBus-UAT-$(Build.BuildNumber)'

          - task: AzurePowerShell@5
            displayName: 'Verify UAT Deployment'
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: 'InlineScript'
              Inline: |
                # Read Service Bus name from parameters file
                $paramsContent = Get-Content "$(parametersFile)" | ConvertFrom-Json
                $serviceBusName = $paramsContent.parameters.serviceBusNamespaceName.value
                
                Write-Output "Checking Service Bus: $serviceBusName in Resource Group: $(resourceGroupName)"
                
                # Get Service Bus namespace details
                try {
                  $namespace = Get-AzServiceBusNamespace -ResourceGroupName "$(resourceGroupName)" -Name $serviceBusName
                  Write-Output "✅ Service Bus Namespace: $($namespace.Name)"
                  Write-Output "✅ Status: $($namespace.Status)"
                  Write-Output "✅ SKU: $($namespace.Sku.Name)"
                  Write-Output "✅ Capacity: $($namespace.Sku.Capacity)"
                  Write-Output "✅ Location: $($namespace.Location)"
                  
                  if ($namespace.Sku.Name -eq "Premium") {
                    Write-Output "✅ Premium Features:"
                    Write-Output "   - Zone Redundant: $($namespace.ZoneRedundant)"
                    Write-Output "   - Private Endpoint Ready: $($namespace.PublicNetworkAccess -eq 'Disabled')"
                  }
                  
                  Write-Output "UAT Service Bus deployment verified successfully"
                }
                catch {
                  Write-Error "Failed to verify Service Bus deployment: $_"
                  exit 1
                }
              azurePowerShellVersion: 'LatestVersion'

# ===============================
# PRODUCTION ENVIRONMENT
# ===============================
- stage: PROD_Environment
  displayName: 'Deploy to PRODUCTION Environment'
  dependsOn: UAT_Environment
  condition: and(succeeded(), eq('${{ parameters.deployToProd }}', true))
  variables:
  - name: environmentName
    value: 'PROD'
  - name: resourceGroupName
    value: 'rg-servicebus-prod'
  - name: parametersFile
    value: './Infrastructure/ServiceBus/prod.parameters.json'
  jobs:
  - deployment: DeployServiceBus
    displayName: 'Deploy Service Bus to PRODUCTION'
    pool:
      vmImage: 'windows-latest'
    environment: 'PRODUCTION'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Service Bus to PRODUCTION'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: 'UK South'
              templateLocation: 'Linked artifact'
              csmFile: $(templateFile)
              csmParametersFile: $(parametersFile)
              deploymentMode: 'Incremental'
              deploymentName: 'ServiceBus-PROD-$(Build.BuildNumber)'

          - task: AzurePowerShell@5
            displayName: 'Verify PRODUCTION Deployment'
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: 'InlineScript'
              Inline: |
                # Read Service Bus name from parameters file
                $paramsContent = Get-Content "$(parametersFile)" | ConvertFrom-Json
                $serviceBusName = $paramsContent.parameters.serviceBusNamespaceName.value
                
                Write-Output "Checking PRODUCTION Service Bus: $serviceBusName in Resource Group: $(resourceGroupName)"
                
                # Get Service Bus namespace details
                try {
                  $namespace = Get-AzServiceBusNamespace -ResourceGroupName "$(resourceGroupName)" -Name $serviceBusName
                  Write-Output "✅ PRODUCTION Service Bus Namespace: $($namespace.Name)"
                  Write-Output "✅ Status: $($namespace.Status)"
                  Write-Output "✅ SKU: $($namespace.Sku.Name)"
                  Write-Output "✅ Capacity: $($namespace.Sku.Capacity)"
                  Write-Output "✅ Location: $($namespace.Location)"
                  
                  if ($namespace.Sku.Name -eq "Premium") {
                    Write-Output "✅ PRODUCTION Premium Features:"
                    Write-Output "   - Zone Redundant: $($namespace.ZoneRedundant)"
                    Write-Output "   - Private Network Access: $($namespace.PublicNetworkAccess -eq 'Disabled')"
                    Write-Output "   - Minimum TLS Version: $($namespace.MinimumTlsVersion)"
                    
                    # Check for managed identity
                    if ($namespace.Identity) {
                      Write-Output "   - Managed Identity: Enabled"
                      Write-Output "   - Principal ID: $($namespace.Identity.PrincipalId)"
                    }
                  }
                  
                  # Log connection information (without sensitive data)
                  Write-Output "✅ Service Bus FQDN: $($namespace.ServiceBusEndpoint)"
                  Write-Output "✅ Resource ID: $($namespace.Id)"
                  
                  Write-Output "🎉 PRODUCTION Service Bus deployment completed and verified successfully!"
                }
                catch {
                  Write-Error "❌ Failed to verify PRODUCTION Service Bus deployment: $_"
                  exit 1
                }
              azurePowerShellVersion: 'LatestVersion'

          - task: PowerShell@2
            displayName: 'Generate Deployment Summary'
            inputs:
              targetType: 'inline'
              script: |
                Write-Output "=================================================="
                Write-Output "         SERVICE BUS DEPLOYMENT SUMMARY"
                Write-Output "=================================================="
                Write-Output "Environment: PRODUCTION"
                Write-Output "Resource Group: $(resourceGroupName)"
                Write-Output "Template File: $(templateFile)"
                Write-Output "Parameters File: $(parametersFile)"
                Write-Output "Deployment Name: ServiceBus-PROD-$(Build.BuildNumber)"
                Write-Output "Build Number: $(Build.BuildNumber)"
                Write-Output "Build ID: $(Build.BuildId)"
                Write-Output "Deployment Timestamp: $(System.DateTime)"
                Write-Output "=================================================="
